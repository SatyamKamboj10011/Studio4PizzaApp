name: Deploy React App to Apache Server

on:
  push:
    branches:
      - main  # Change this if using a different branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install SSH & SSHPass
        run: sudo apt-get install -y sshpass

      - name: Debug SSH Variables
        run: |
          echo "Server Host: ${{ secrets.SERVER_HOST }}"
          echo "Server Username: ${{ secrets.SERVER_USERNAME }}"

      - name: Install Node.js Dependencies & Build React App
        run: |
          export CI=false  # Prevent ESLint warnings from failing the build
          npm install
          npm run build

      - name: Transfer Files to Apache Server
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
        run: |
          sshpass -p "$SERVER_PASSWORD" ssh -tt -o StrictHostKeyChecking=no $SERVER_USERNAME@$SERVER_HOST << 'EOF'
            echo "✅ Successfully connected to $SERVER_HOST"

            # Clear old files and upload new ones
            sudo rm -rf /var/www/html/*
            exit
          EOF
          
          sshpass -p "$SERVER_PASSWORD" scp -r build/* $SERVER_USERNAME@$SERVER_HOST:/var/www/html/


      zap-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Debug Environment
        run: |
          echo "Operating System: $(uname -a)"
          echo "Runner Version: $RUNNER_VERSION"

      - name: Install Docker
        run: |
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
          docker --version

      - name: Run OWASP ZAP Full Scan
        run: |
          docker pull zaproxy/zap-stable
          docker run -v $(pwd):/zap/wrk/:rw -t zaproxy/zap-stable zap-full-scan.py -t http://${{ secrets.SERVER_HOST }}/ -a -I

     # - name: Restart Apache Server
       # env:
       #   SERVER_HOST: ${{ secrets.SERVER_HOST }}
         # SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
        #  SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
       # run: |
         # sshpass -p "$SERVER_PASSWORD" ssh -tt -o StrictHostKeyChecking=no $SERVER_USERNAME@$SERVER_HOST << 'EOF'
          #  echo "✅ Restarting Apache..."
          #  sudo systemctl restart apache2
       #   EOF
