name: Deploy React App to Apache Server

on:
  push:
    branches:
      - main  # Change this to your target branch if needed

jobs:
  quality-check:
    name: ✅ Code Quality & Tests
    runs-on: ubuntu-latest

    steps:
      - name: ⬇️ Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Set Up Node.js and Install Dependencies
        uses: actions/setup-node@v3
        with:
          node-version: '18'  # Use the Node.js version that matches your project
          cache: 'npm'

      - name: 📚 Install Project Dependencies
        run: |
          npm install

      - name: 🧹 Run ESLint for Code Quality Check
        run: |
          npx eslint ./src --max-warnings=0

      - name: 🧪 Run Jest Tests
        run: |
          npm run test -- --watchAll=false --passWithNoTests

  deploy:
    name: 🚀 Deploy to Apache Server
    runs-on: ubuntu-latest
    needs: quality-check  # Ensures Quality Check & Tests pass first

    steps:
      - name: ⬇️ Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Install SSH & SSHPass
        run: sudo apt-get install -y sshpass

      - name: 📦 Install Dependencies & Build React App
        run: |
          export CI=false  # Prevent ESLint warnings from failing the build
          npm install
          npm run build

      - name: 🚚 Transfer Files to Apache Server
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
        run: |
          echo "Connecting to $SERVER_HOST..."
          sshpass -p "$SERVER_PASSWORD" ssh -tt -o StrictHostKeyChecking=no $SERVER_USERNAME@$SERVER_HOST << 'EOF'
            echo "✅ Connected to server. Cleaning old files..."
            sudo rm -rf /var/www/html/*
            exit
          EOF

          echo "📤 Uploading new build files..."
          sshpass -p "$SERVER_PASSWORD" scp -r build/* $SERVER_USERNAME@$SERVER_HOST:/var/www/html/

      # - name: 🔁 (Optional) Restart Apache Server
      #   if: always()
      #   env:
      #     SERVER_HOST: ${{ secrets.SERVER_HOST }}
      #     SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
      #     SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
      #   run: |
      #     sshpass -p "$SERVER_PASSWORD" ssh -tt -o StrictHostKeyChecking=no $SERVER_USERNAME@$SERVER_HOST << 'EOF'
      #       echo "🔁 Restarting Apache..."
      #       sudo systemctl restart apache2
      #       exit
      #     EOF

  zap-scan:
    name: 🛡️ OWASP ZAP Security Scan
    runs-on: ubuntu-latest
    needs: deploy  # Waits for deploy job to finish

    steps:
      - name: 🖥️ Debug Environment Info
        run: |
          echo "OS Info: $(uname -a)"
          echo "Runner Version: $RUNNER_VERSION"

      - name: 🐳 Install Docker
        run: |
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
          docker --version

      - name: 🔎 Run OWASP ZAP Full Scan
        run: |
          docker pull zaproxy/zap-stable
          docker run -v $(pwd):/zap/wrk/:rw -t zaproxy/zap-stable zap-full-scan.py \
            -t http://${{ secrets.SERVER_HOST }}/ -a -I
